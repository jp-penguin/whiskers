@mixin media-breakpoint-only($size) {
  @if $size==xs {
    @media screen and (min-width: 0px) and (max-width: 579.98) {
      // Extra small viewport
      @content;
    }
  }

  @if $size==sm {
    @media screen and (min-width: 0px) and (max-width: 579.98) {
      // Small viewport
      @content;
    }
  }

  @if $size==md {
    @media screen and (min-width: 0px) and (max-width: 579.98) {
      // Medium viewport
      @content;
    }
  }

  @if $size==lg {
    @media screen and (min-width: 0px) and (max-width: 579.98) {
      // Large viewport
      @content;
    }
  }

  @if $size==xl {
    @media screen and (min-width: 0px) and (max-width: 579.98) {
      // Extra large viewport
      @content;
    }
  }
}

@mixin media-query($minWidth: '', $maxWidth: '') {
  @if ($minWidth==''and $maxWidth=='') {
    @media screen {
      @content;
    }
  }

  @if ($minWidth=='') {
    @media screen and (max-width: $maxWidth) {
      @content;
    }
  }

  @if ($maxWidth=='') {
    @media screen and (min-width: $maxWidth) {
      @content;
    }
  }

  @else {
    @media screen and (min-width: $maxWidth) and (max-width: $maxWidth) {
      @content;
    }
  }
}

@mixin set-colors($background, $color) {
  background-color: $background;
  color: $color;
}

@mixin modal($selector, $height, $width, $bg1, $c1, $bg2, $c2) {
  #{$selector} {
    display: inline-block;

    > :last-child {
      left: 0px;
      top: 0;
      position: absolute;
      display: none;
      align-content: center;
      justify-content: center;
      height: 100%;
      width: 100%;

      >* {
        z-index: 1455;
        height: $height;
        min-width: 300px;
        width: $width;
      }
    }

    &.show {
      > :last-child {
        display: grid;
        grid-template-rows: repeat(auto-fit, 48px);

        > :nth-child(odd) {
          @include set-colors($bg1, $c1);
        }

        > :nth-child(even) {
          @include set-colors($bg2, $c2);
        }
      }
    }
  }
}